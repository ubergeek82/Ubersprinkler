!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Alarm	.\TimeAlarms.cpp	/^    TimeAlarmsClass Alarm = TimeAlarmsClass() ;$/;"	v
Alarm	.\TimeAlarms.h	/^   AlarmClass Alarm[dtNBR_ALARMS];$/;"	m	class:TimeAlarmsClass
AlarmClass	.\TimeAlarms.cpp	/^AlarmClass::AlarmClass()$/;"	f	class:AlarmClass
AlarmClass	.\TimeAlarms.h	/^class AlarmClass$/;"	c
AlarmHMS	.\TimeAlarms.h	176;"	d
AlarmID_t	.\TimeAlarms.h	/^typedef uint8_t AlarmID_t;$/;"	t
AlarmId	.\TimeAlarms.h	/^typedef AlarmID_t AlarmId;  \/\/ Arduino friendly name$/;"	t
AlarmMode_t	.\TimeAlarms.h	/^    AlarmMode_t   ;$/;"	t	typeref:struct:__anon9
ArduinoJson	.\lib\JsonArray.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonArrayIterator.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonObject.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonObjectIterator.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonPair.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonParser.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonParserBase.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonToken.h	/^namespace ArduinoJson$/;"	n
ArduinoJson	.\lib\JsonValue.h	/^namespace ArduinoJson$/;"	n
DAYS_PER_WEEK	.\TimeAlarms.h	21;"	d
DEPRECATED	.\lib\JsonValue.h	12;"	d
DEPRECATED	.\lib\JsonValue.h	14;"	d
DEPRECATED	.\lib\JsonValue.h	17;"	d
HTTP_METHOD_DELETE	.\lib\HttpClient.h	/^static const char* HTTP_METHOD_DELETE = "DELETE";$/;"	v
HTTP_METHOD_GET	.\lib\HttpClient.h	/^static const char* HTTP_METHOD_GET    = "GET";$/;"	v
HTTP_METHOD_POST	.\lib\HttpClient.h	/^static const char* HTTP_METHOD_POST   = "POST";$/;"	v
HTTP_METHOD_PUT	.\lib\HttpClient.h	/^static const char* HTTP_METHOD_PUT    = "PUT";$/;"	v
HttpClient	.\lib\HttpClient.cpp	/^HttpClient::HttpClient()$/;"	f	class:HttpClient
HttpClient	.\lib\HttpClient.h	/^class HttpClient {$/;"	c
IS_ONESHOT	.\TimeAlarms.cpp	30;"	d	file:
IS_REPEAT	.\TimeAlarms.cpp	31;"	d	file:
JSMN_ARRAY	.\lib\jsmn.h	/^	JSMN_ARRAY = 2,$/;"	e	enum:__anon4
JSMN_ERROR_INVAL	.\lib\jsmn.h	/^	JSMN_ERROR_INVAL = -2,$/;"	e	enum:__anon5
JSMN_ERROR_NOMEM	.\lib\jsmn.h	/^	JSMN_ERROR_NOMEM = -1,$/;"	e	enum:__anon5
JSMN_ERROR_PART	.\lib\jsmn.h	/^	JSMN_ERROR_PART = -3,$/;"	e	enum:__anon5
JSMN_OBJECT	.\lib\jsmn.h	/^	JSMN_OBJECT = 1,$/;"	e	enum:__anon4
JSMN_PRIMITIVE	.\lib\jsmn.h	/^	JSMN_PRIMITIVE = 0,$/;"	e	enum:__anon4
JSMN_STRING	.\lib\jsmn.h	/^	JSMN_STRING = 3$/;"	e	enum:__anon4
JSMN_SUCCESS	.\lib\jsmn.h	/^	JSMN_SUCCESS = 0$/;"	e	enum:__anon5
JsonArray	.\lib\JsonArray.h	/^            JsonArray() $/;"	f	class:ArduinoJson::Parser::JsonArray
JsonArray	.\lib\JsonArray.h	/^            JsonArray(JsonValue value)$/;"	f	class:ArduinoJson::Parser::JsonArray
JsonArray	.\lib\JsonArray.h	/^        class JsonArray : JsonValue$/;"	c	namespace:ArduinoJson::Parser
JsonArrayIterator	.\lib\JsonArrayIterator.h	/^            JsonArrayIterator(JsonToken token)$/;"	f	class:ArduinoJson::Parser::JsonArrayIterator
JsonArrayIterator	.\lib\JsonArrayIterator.h	/^        class JsonArrayIterator : JsonToken$/;"	c	namespace:ArduinoJson::Parser
JsonHashTable	.\lib\JsonObject.h	/^        DEPRECATED typedef JsonObject JsonHashTable;$/;"	t	namespace:ArduinoJson::Parser
JsonObject	.\lib\JsonObject.h	/^            JsonObject()$/;"	f	class:ArduinoJson::Parser::JsonObject
JsonObject	.\lib\JsonObject.h	/^            JsonObject(JsonValue value)$/;"	f	class:ArduinoJson::Parser::JsonObject
JsonObject	.\lib\JsonObject.h	/^        class JsonObject : JsonValue$/;"	c	namespace:ArduinoJson::Parser
JsonObjectIterator	.\lib\JsonObjectIterator.h	/^            JsonObjectIterator(JsonToken token)$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
JsonObjectIterator	.\lib\JsonObjectIterator.h	/^        class JsonObjectIterator : JsonToken$/;"	c	namespace:ArduinoJson::Parser
JsonPair	.\lib\JsonPair.h	/^            JsonPair(JsonToken token)$/;"	f	class:ArduinoJson::Parser::JsonPair
JsonPair	.\lib\JsonPair.h	/^        class JsonPair : JsonToken$/;"	c	namespace:ArduinoJson::Parser
JsonParser	.\lib\JsonParser.h	/^            JsonParser()$/;"	f	class:ArduinoJson::Parser::JsonParser
JsonParser	.\lib\JsonParser.h	/^        class JsonParser : public JsonParserBase$/;"	c	namespace:ArduinoJson::Parser
JsonParserBase	.\lib\JsonParserBase.h	/^            JsonParserBase(jsmntok_t* tokens, int maxTokens)$/;"	f	class:ArduinoJson::Parser::JsonParserBase
JsonParserBase	.\lib\JsonParserBase.h	/^        class JsonParserBase$/;"	c	namespace:ArduinoJson::Parser
JsonToken	.\lib\JsonToken.h	/^            JsonToken()$/;"	f	class:ArduinoJson::Parser::JsonToken
JsonToken	.\lib\JsonToken.h	/^            JsonToken(char* json, jsmntok_t* token)$/;"	f	class:ArduinoJson::Parser::JsonToken
JsonToken	.\lib\JsonToken.h	/^        class JsonToken$/;"	c	namespace:ArduinoJson::Parser
JsonValue	.\lib\JsonValue.h	/^            JsonValue()$/;"	f	class:ArduinoJson::Parser::JsonValue
JsonValue	.\lib\JsonValue.h	/^            JsonValue(JsonToken token)$/;"	f	class:ArduinoJson::Parser::JsonValue
JsonValue	.\lib\JsonValue.h	/^        class JsonValue : protected JsonToken$/;"	c	namespace:ArduinoJson::Parser
LOGGING	.\lib\HttpClient.cpp	3;"	d	file:
Mode	.\TimeAlarms.h	/^  AlarmMode_t Mode;$/;"	m	class:AlarmClass
OFF	.\StationController.cpp	5;"	d	file:
ON	.\StationController.cpp	4;"	d	file:
OnTick_t	.\TimeAlarms.h	/^typedef void (*OnTick_t)();  \/\/ alarm callback function typedef $/;"	t
Parser	.\lib\JsonArray.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonArrayIterator.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonObject.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonObjectIterator.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonPair.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonParser.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonParserBase.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonToken.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
Parser	.\lib\JsonValue.h	/^    namespace Parser$/;"	n	namespace:ArduinoJson
SECS_PER_DAY	.\TimeAlarms.h	20;"	d
SECS_PER_HOUR	.\TimeAlarms.h	19;"	d
SECS_PER_MIN	.\TimeAlarms.h	18;"	d
SECS_PER_WEEK	.\TimeAlarms.h	22;"	d
SECS_PER_YEAR	.\TimeAlarms.h	23;"	d
SECS_YR_2000	.\TimeAlarms.h	24;"	d
STATION1	.\StationController.h	/^    uint8_t STATION1;$/;"	m	class:StationController
STATION1	.\WeatherController.h	/^    uint8_t STATION1;$/;"	m	class:WeatherController
STATION2	.\StationController.h	/^    uint8_t STATION2;$/;"	m	class:StationController
STATION2	.\WeatherController.h	/^    uint8_t STATION2;$/;"	m	class:WeatherController
STATION3	.\StationController.h	/^    uint8_t STATION3;$/;"	m	class:StationController
STATION3	.\WeatherController.h	/^    uint8_t STATION3;$/;"	m	class:WeatherController
STATION4	.\StationController.h	/^    uint8_t STATION4;$/;"	m	class:StationController
STATION4	.\WeatherController.h	/^    uint8_t STATION4;$/;"	m	class:WeatherController
StationController	.\StationController.cpp	/^StationController::StationController(uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4){$/;"	f	class:StationController
StationController	.\StationController.h	/^class StationController{$/;"	c
TIMEOUT	.\lib\HttpClient.cpp	/^static const uint16_t TIMEOUT = 5000; \/\/ Allow maximum 5s between data packets.$/;"	v	file:
TimeAlarmsClass	.\TimeAlarms.cpp	/^TimeAlarmsClass::TimeAlarmsClass()$/;"	f	class:TimeAlarmsClass
TimeAlarmsClass	.\TimeAlarms.h	/^class TimeAlarmsClass$/;"	c
TimeAlarms_h	.\TimeAlarms.h	4;"	d
USE_SPECIALIST_METHODS	.\TimeAlarms.h	61;"	d
Weather	.\openweathermap.cpp	/^Weather::Weather(String location, HttpClient* client, String apiKey) {$/;"	f	class:Weather
Weather	.\openweathermap.h	/^class Weather {$/;"	c
WeatherController	.\WeatherController.cpp	/^WeatherController::WeatherController(){$/;"	f	class:WeatherController
WeatherController	.\WeatherController.h	/^class WeatherController{$/;"	c
_SPARKWEATHER	.\openweathermap.h	8;"	d
_STNCTL_H	.\StationController.h	2;"	d
_WCTRL_H	.\WeatherController.h	2;"	d
__HTTP_CLIENT_H_	.\lib\HttpClient.h	2;"	d
__JSMN_H_	.\lib\jsmn.h	2;"	d
_json	.\lib\JsonToken.h	/^            char* _json;$/;"	m	class:ArduinoJson::Parser::JsonToken
_maxTokens	.\lib\JsonParserBase.h	/^            int _maxTokens;$/;"	m	class:ArduinoJson::Parser::JsonParserBase
_token	.\lib\JsonToken.h	/^            jsmntok_t* _token;$/;"	m	class:ArduinoJson::Parser::JsonToken
_tokens	.\lib\JsonParser.h	/^            jsmntok_t _tokens[MAX_TOKENS];$/;"	m	class:ArduinoJson::Parser::JsonParser
_tokens	.\lib\JsonParserBase.h	/^            jsmntok_t* _tokens;$/;"	m	class:ArduinoJson::Parser::JsonParserBase
alarmOnce	.\TimeAlarms.cpp	/^AlarmID_t TimeAlarmsClass::alarmOnce(const int H,  const int M,  const int S,OnTick_t onTickHandler){   \/\/ as above with HMS arguments$/;"	f	class:TimeAlarmsClass
alarmOnce	.\TimeAlarms.cpp	/^AlarmID_t TimeAlarmsClass::alarmOnce(const timeDayOfWeek_t DOW, const int H,  const int M,  const int S, OnTick_t onTickHandler){  \/\/ as above, with day of week $/;"	f	class:TimeAlarmsClass
alarmOnce	.\TimeAlarms.cpp	/^AlarmID_t TimeAlarmsClass::alarmOnce(time_t value, OnTick_t onTickHandler){   \/\/ trigger once at the given time of day$/;"	f	class:TimeAlarmsClass
alarmRepeat	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ \/\/ as above with HMS arguments$/;"	f	class:TimeAlarmsClass
alarmRepeat	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::alarmRepeat(const timeDayOfWeek_t DOW, const int H,  const int M,  const int S, OnTick_t onTickHandler){  \/\/ as above, with day of week $/;"	f	class:TimeAlarmsClass
alarmRepeat	.\TimeAlarms.cpp	/^AlarmID_t TimeAlarmsClass::alarmRepeat(time_t value, OnTick_t onTickHandler){ \/\/ trigger daily at the given time$/;"	f	class:TimeAlarmsClass
alarmType	.\TimeAlarms.h	/^	uint8_t alarmType              :4 ;  \/\/ enumeration of daily\/weekly (in future: biweekly\/semimonthly\/monthly\/annual)$/;"	m	struct:__anon9
apiKey	.\openweathermap.h	/^	String apiKey;$/;"	m	class:Weather
begin	.\lib\JsonArray.h	/^            JsonArrayIterator begin()$/;"	f	class:ArduinoJson::Parser::JsonArray
begin	.\lib\JsonObject.h	/^            JsonObjectIterator begin()$/;"	f	class:ArduinoJson::Parser::JsonObject
body	.\lib\HttpClient.h	/^  String body;$/;"	m	struct:__anon2
body	.\lib\HttpClient.h	/^  String body;$/;"	m	struct:__anon3
buffer	.\lib\HttpClient.h	/^    char buffer[1024];$/;"	m	class:HttpClient
cached	.\openweathermap.h	/^	bool cached;$/;"	m	struct:weather_forecast_response_t
cachedUpdate	.\openweathermap.cpp	/^weather_forecast_response_t Weather::cachedUpdate() {$/;"	f	class:Weather
childrenCount	.\lib\JsonToken.h	/^            int childrenCount()$/;"	f	class:ArduinoJson::Parser::JsonToken
client	.\lib\HttpClient.h	/^    TCPClient client;$/;"	m	class:HttpClient
client	.\openweathermap.h	/^	HttpClient* client;$/;"	m	class:Weather
conditionCode	.\openweathermap.h	/^	long conditionCode; \/\/ see http:\/\/openweathermap.org\/wiki\/API\/Weather_Condition_Codes$/;"	m	struct:weather_forecast_response_t
containsKey	.\lib\JsonObject.h	/^            bool containsKey(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
count	.\TimeAlarms.cpp	/^    uint8_t TimeAlarmsClass::count()$/;"	f	class:TimeAlarmsClass
create	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) $/;"	f	class:TimeAlarmsClass
dayOfWeek	.\TimeAlarms.h	30;"	d
daysToTime_t	.\TimeAlarms.h	45;"	d
del	.\lib\HttpClient.h	/^    void del(http_request_t &aRequest, http_response_t &aResponse)$/;"	f	class:HttpClient
del	.\lib\HttpClient.h	/^    void del(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])$/;"	f	class:HttpClient
delay	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::delay(unsigned long ms)$/;"	f	class:TimeAlarmsClass
descr	.\openweathermap.h	/^	String descr;$/;"	m	struct:weather_forecast_response_t
disable	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::disable(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
dowFriday	.\TimeAlarms.h	53;"	d
dowMonday	.\TimeAlarms.h	49;"	d
dowSaturday	.\TimeAlarms.h	54;"	d
dowSunday	.\TimeAlarms.h	48;"	d
dowThursday	.\TimeAlarms.h	52;"	d
dowTuesday	.\TimeAlarms.h	50;"	d
dowWednesday	.\TimeAlarms.h	51;"	d
dtAlarmPeriod_t	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	t	typeref:enum:__anon10
dtDailyAlarm	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
dtDay	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	e	enum:__anon8
dtExplicitAlarm	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
dtHour	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	e	enum:__anon8
dtINVALID_ALARM_ID	.\TimeAlarms.h	85;"	d
dtINVALID_TIME	.\TimeAlarms.h	86;"	d
dtIsAlarm	.\TimeAlarms.h	80;"	d
dtLastAlarmType	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
dtMillisecond	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	e	enum:__anon8
dtMinute	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	e	enum:__anon8
dtNBR_ALARMS	.\TimeAlarms.h	59;"	d
dtNotAllocated	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
dtSecond	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	e	enum:__anon8
dtTimer	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
dtUnits_t	.\TimeAlarms.h	/^typedef enum { dtMillisecond, dtSecond, dtMinute, dtHour, dtDay } dtUnits_t;$/;"	t	typeref:enum:__anon8
dtWeeklyAlarm	.\TimeAlarms.h	/^typedef enum  {dtNotAllocated, dtTimer, dtExplicitAlarm, dtDailyAlarm, dtWeeklyAlarm, dtLastAlarmType } dtAlarmPeriod_t ; \/\/ in future: dtBiweekly, dtMonthly, dtAnnual$/;"	e	enum:__anon10
elapsedDays	.\TimeAlarms.h	31;"	d
elapsedSecsThisWeek	.\TimeAlarms.h	37;"	d
elapsedSecsToday	.\TimeAlarms.h	32;"	d
enable	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::enable(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
end	.\lib\JsonArray.h	/^            JsonArrayIterator end()$/;"	f	class:ArduinoJson::Parser::JsonArray
end	.\lib\JsonObject.h	/^            JsonObjectIterator end()$/;"	f	class:ArduinoJson::Parser::JsonObject
end	.\lib\jsmn.h	/^	int end;$/;"	m	struct:__anon6
firstChild	.\lib\JsonToken.h	/^            JsonToken firstChild() const$/;"	f	class:ArduinoJson::Parser::JsonToken
forceIp	.\lib\HttpClient.h	/^  bool forceIp;$/;"	m	struct:__anon2
free	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::free(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
get	.\lib\HttpClient.h	/^    void get(http_request_t &aRequest, http_response_t &aResponse)$/;"	f	class:HttpClient
get	.\lib\HttpClient.h	/^    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])$/;"	f	class:HttpClient
getArray	.\lib\JsonArray.h	/^            DEPRECATED JsonArray getArray(int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
getArray	.\lib\JsonObject.cpp	/^DEPRECATED JsonArray JsonObject::getArray(const char* key)$/;"	f	class:JsonObject
getBool	.\lib\JsonArray.h	/^            DEPRECATED bool getBool(int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
getBool	.\lib\JsonObject.h	/^            DEPRECATED bool getBool(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
getDigitsNow	.\TimeAlarms.cpp	/^    uint8_t TimeAlarmsClass::getDigitsNow( dtUnits_t Units)$/;"	f	class:TimeAlarmsClass
getDouble	.\lib\JsonArray.h	/^            DEPRECATED double getDouble(int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
getDouble	.\lib\JsonObject.h	/^            DEPRECATED double getDouble(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
getHashTable	.\lib\JsonArray.cpp	/^DEPRECATED JsonObject JsonArray::getHashTable(int index)$/;"	f	class:JsonArray
getHashTable	.\lib\JsonObject.h	/^            DEPRECATED JsonObject getHashTable(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
getLength	.\lib\JsonArray.h	/^            DEPRECATED int getLength()$/;"	f	class:ArduinoJson::Parser::JsonArray
getLong	.\lib\JsonArray.h	/^            DEPRECATED long getLong(int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
getLong	.\lib\JsonObject.h	/^            DEPRECATED long getLong(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
getNextTrigger	.\TimeAlarms.cpp	/^     time_t TimeAlarmsClass::getNextTrigger()$/;"	f	class:TimeAlarmsClass
getStatus	.\StationController.cpp	/^int StationController::getStatus(){$/;"	f	class:StationController
getString	.\lib\JsonArray.h	/^            DEPRECATED char* getString(int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
getString	.\lib\JsonObject.h	/^            DEPRECATED char* getString(const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
getText	.\lib\JsonToken.cpp	/^char* JsonToken::getText()$/;"	f	class:JsonToken
getTriggeredAlarmId	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::getTriggeredAlarmId()  \/\/returns the currently triggered  alarm id$/;"	f	class:TimeAlarmsClass
header	.\lib\HttpClient.h	/^  const char* header;$/;"	m	struct:__anon1
hostname	.\lib\HttpClient.h	/^  String hostname;$/;"	m	struct:__anon2
hoursToTime_t	.\TimeAlarms.h	44;"	d
http_header_t	.\lib\HttpClient.h	/^} http_header_t;$/;"	t	typeref:struct:__anon1
http_request_t	.\lib\HttpClient.h	/^} http_request_t;$/;"	t	typeref:struct:__anon2
http_response_t	.\lib\HttpClient.h	/^} http_response_t;$/;"	t	typeref:struct:__anon3
ip	.\lib\HttpClient.h	/^  IPAddress ip;$/;"	m	struct:__anon2
isAlarm	.\TimeAlarms.cpp	/^     bool TimeAlarmsClass::isAlarm(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
isAllocated	.\TimeAlarms.cpp	/^     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
isArray	.\lib\JsonToken.h	/^            bool isArray()$/;"	f	class:ArduinoJson::Parser::JsonToken
isEnabled	.\TimeAlarms.h	/^    uint8_t isEnabled              :1 ;  \/\/ the timer is only actioned if isEnabled is true $/;"	m	struct:__anon9
isObject	.\lib\JsonToken.h	/^            bool isObject()$/;"	f	class:ArduinoJson::Parser::JsonToken
isOneShot	.\TimeAlarms.h	/^    uint8_t isOneShot              :1 ;  \/\/ the timer will be de-allocated after trigger is processed $/;"	m	struct:__anon9
isPrimitive	.\lib\JsonToken.h	/^            bool isPrimitive()$/;"	f	class:ArduinoJson::Parser::JsonToken
isServicing	.\TimeAlarms.h	/^   uint8_t isServicing;$/;"	m	class:TimeAlarmsClass
isString	.\lib\JsonToken.h	/^            bool isString()$/;"	f	class:ArduinoJson::Parser::JsonToken
isSuccess	.\openweathermap.h	/^	bool isSuccess;$/;"	m	struct:weather_forecast_response_t
isValid	.\lib\JsonToken.h	/^            bool isValid()$/;"	f	class:ArduinoJson::Parser::JsonToken
jsmn_alloc_token	.\lib\jsmn.cpp	/^static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, $/;"	f	file:
jsmn_fill_token	.\lib\jsmn.cpp	/^static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type, $/;"	f	file:
jsmn_init	.\lib\jsmn.cpp	/^void jsmn_init(jsmn_parser *parser) {$/;"	f
jsmn_parse	.\lib\jsmn.cpp	/^jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, jsmntok_t *tokens, $/;"	f
jsmn_parse_primitive	.\lib\jsmn.cpp	/^static jsmnerr_t jsmn_parse_primitive(jsmn_parser *parser, const char *js,$/;"	f	file:
jsmn_parse_string	.\lib\jsmn.cpp	/^static jsmnerr_t jsmn_parse_string(jsmn_parser *parser, const char *js,$/;"	f	file:
jsmn_parser	.\lib\jsmn.h	/^} jsmn_parser;$/;"	t	typeref:struct:__anon7
jsmnerr_t	.\lib\jsmn.h	/^} jsmnerr_t;$/;"	t	typeref:enum:__anon5
jsmntok_t	.\lib\jsmn.h	/^} jsmntok_t;$/;"	t	typeref:struct:__anon6
jsmntype_t	.\lib\jsmn.h	/^} jsmntype_t;$/;"	t	typeref:enum:__anon4
key	.\lib\JsonObjectIterator.h	/^            const char* key() const$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
key	.\lib\JsonPair.h	/^            const char* key()$/;"	f	class:ArduinoJson::Parser::JsonPair
lastReponse	.\openweathermap.h	/^	weather_forecast_response_t lastReponse;$/;"	m	class:Weather
lastsync	.\openweathermap.h	/^	unsigned long lastsync;$/;"	m	class:Weather
location	.\openweathermap.h	/^	String location;$/;"	m	class:Weather
minutesToTime_t	.\TimeAlarms.h	43;"	d
nextMidnight	.\TimeAlarms.h	36;"	d
nextSibling	.\lib\JsonToken.cpp	/^JsonToken JsonToken::nextSibling() const$/;"	f	class:JsonToken
nextSunday	.\TimeAlarms.h	39;"	d
nextTrigger	.\TimeAlarms.h	/^  time_t nextTrigger;$/;"	m	class:AlarmClass
now	.\TimeAlarms.h	14;"	d
null	.\lib\JsonToken.h	/^            static JsonToken null()$/;"	f	class:ArduinoJson::Parser::JsonToken
numberOfHours	.\TimeAlarms.h	29;"	d
numberOfMinutes	.\TimeAlarms.h	28;"	d
numberOfSeconds	.\TimeAlarms.h	27;"	d
onTickHandler	.\TimeAlarms.h	/^  OnTick_t onTickHandler; $/;"	m	class:AlarmClass
operator !=	.\lib\JsonArrayIterator.h	/^            bool operator!= (const JsonArrayIterator& other) const$/;"	f	class:ArduinoJson::Parser::JsonArrayIterator
operator !=	.\lib\JsonObjectIterator.h	/^            bool operator!= (const JsonObjectIterator& other) const$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
operator !=	.\lib\JsonToken.h	/^            bool operator!=(const JsonToken& other) const$/;"	f	class:ArduinoJson::Parser::JsonToken
operator *	.\lib\JsonArrayIterator.h	/^            JsonValue operator*() const$/;"	f	class:ArduinoJson::Parser::JsonArrayIterator
operator *	.\lib\JsonObjectIterator.h	/^            JsonPair operator*() const$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
operator ++	.\lib\JsonArrayIterator.h	/^            void operator++()$/;"	f	class:ArduinoJson::Parser::JsonArrayIterator
operator ++	.\lib\JsonObjectIterator.h	/^            void operator++()$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
operator []	.\lib\JsonArray.h	/^            JsonValue operator[](int index)$/;"	f	class:ArduinoJson::Parser::JsonArray
operator []	.\lib\JsonObject.h	/^            JsonValue operator[](const char* key)$/;"	f	class:ArduinoJson::Parser::JsonObject
operator []	.\lib\JsonValue.cpp	/^JsonValue JsonValue::operator[](const char* desiredKey)$/;"	f	class:JsonValue
operator []	.\lib\JsonValue.cpp	/^JsonValue JsonValue::operator[](int index)$/;"	f	class:JsonValue
operator bool	.\lib\JsonValue.cpp	/^JsonValue::operator bool()$/;"	f	class:JsonValue
operator char*	.\lib\JsonValue.cpp	/^JsonValue::operator char*()$/;"	f	class:JsonValue
operator double	.\lib\JsonValue.cpp	/^JsonValue::operator double()$/;"	f	class:JsonValue
operator long	.\lib\JsonValue.cpp	/^JsonValue::operator long()$/;"	f	class:JsonValue
parent	.\lib\jsmn.h	/^	int parent;$/;"	m	struct:__anon6
parse	.\lib\JsonParserBase.cpp	/^JsonValue JsonParserBase::parse(char* json)$/;"	f	class:JsonParserBase
parse	.\openweathermap.cpp	/^bool Weather::parse(String& data, weather_forecast_response_t response_today, weather_forecast_response_t response_tomorrow) {$/;"	f	class:Weather
parseArray	.\lib\JsonParserBase.h	/^            DEPRECATED JsonArray parseArray(char* json)$/;"	f	class:ArduinoJson::Parser::JsonParserBase
parseHashTable	.\lib\JsonParserBase.h	/^            DEPRECATED JsonObject parseHashTable(char* json)$/;"	f	class:ArduinoJson::Parser::JsonParserBase
parser	.\openweathermap.h	/^	ArduinoJson::Parser::JsonParser<70> parser; \/\/ occupies 70 * 4 bytes$/;"	m	class:Weather
path	.\lib\HttpClient.h	/^  String path;$/;"	m	struct:__anon2
port	.\lib\HttpClient.h	/^  int port;$/;"	m	struct:__anon2
pos	.\lib\jsmn.h	/^	unsigned int pos; \/* offset in the JSON string *\/$/;"	m	struct:__anon7
post	.\lib\HttpClient.h	/^    void post(http_request_t &aRequest, http_response_t &aResponse)$/;"	f	class:HttpClient
post	.\lib\HttpClient.h	/^    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])$/;"	f	class:HttpClient
previousMidnight	.\TimeAlarms.h	35;"	d
previousSunday	.\TimeAlarms.h	38;"	d
put	.\lib\HttpClient.h	/^    void put(http_request_t &aRequest, http_response_t &aResponse)$/;"	f	class:HttpClient
put	.\lib\HttpClient.h	/^    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])$/;"	f	class:HttpClient
read	.\TimeAlarms.cpp	/^    time_t TimeAlarmsClass::read(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
readType	.\TimeAlarms.cpp	/^    dtAlarmPeriod_t TimeAlarmsClass::readType(AlarmID_t ID)$/;"	f	class:TimeAlarmsClass
request	.\lib\HttpClient.cpp	/^void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)$/;"	f	class:HttpClient
request	.\openweathermap.h	/^	http_request_t request;$/;"	m	class:Weather
sendHeader	.\lib\HttpClient.cpp	/^void HttpClient::sendHeader(const char* aHeaderName)$/;"	f	class:HttpClient
sendHeader	.\lib\HttpClient.cpp	/^void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)$/;"	f	class:HttpClient
sendHeader	.\lib\HttpClient.cpp	/^void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)$/;"	f	class:HttpClient
serviceAlarms	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::serviceAlarms()$/;"	f	class:TimeAlarmsClass
servicedAlarmId	.\TimeAlarms.h	/^   uint8_t servicedAlarmId; \/\/ the alarm currently being serviced$/;"	m	class:TimeAlarmsClass
setCelsius	.\openweathermap.cpp	/^void Weather::setCelsius() {$/;"	f	class:Weather
setFahrenheit	.\openweathermap.cpp	/^void Weather::setFahrenheit() {$/;"	f	class:Weather
size	.\lib\JsonArray.h	/^            int size()$/;"	f	class:ArduinoJson::Parser::JsonArray
size	.\lib\jsmn.h	/^	int size;$/;"	m	struct:__anon6
start	.\lib\jsmn.h	/^	int start;$/;"	m	struct:__anon6
status	.\lib\HttpClient.h	/^  int status;$/;"	m	struct:__anon3
success	.\lib\JsonArray.h	/^            bool success()$/;"	f	class:ArduinoJson::Parser::JsonArray
success	.\lib\JsonObject.h	/^            bool success()$/;"	f	class:ArduinoJson::Parser::JsonObject
success	.\lib\JsonValue.h	/^            bool success()$/;"	f	class:ArduinoJson::Parser::JsonValue
temp_high	.\openweathermap.h	/^	long temp_high;$/;"	m	struct:weather_forecast_response_t
temp_low	.\openweathermap.h	/^	long temp_low;$/;"	m	struct:weather_forecast_response_t
timeDayOfWeek_t	.\TimeAlarms.h	16;"	d
timerOnce	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   \/\/ As above with HMS arguments$/;"	f	class:TimeAlarmsClass
timerOnce	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::timerOnce(time_t value, OnTick_t onTickHandler){   \/\/ trigger once after the given number of seconds $/;"	f	class:TimeAlarmsClass
timerRepeat	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ \/\/ trigger after the given number of seconds continuously$/;"	f	class:TimeAlarmsClass
timerRepeat	.\TimeAlarms.cpp	/^    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ \/\/ trigger after the given number of seconds continuously$/;"	f	class:TimeAlarmsClass
toggleAllStations	.\StationController.cpp	/^int StationController::toggleAllStations(String action){$/;"	f	class:StationController
toggleStation	.\StationController.cpp	/^int StationController::toggleStation(String arg){$/;"	f	class:StationController
toknext	.\lib\jsmn.h	/^	int toknext; \/* next token to allocate *\/$/;"	m	struct:__anon7
toksuper	.\lib\jsmn.h	/^	int toksuper; \/* superior token node, e.g parent object or array *\/$/;"	m	struct:__anon7
triggerOnce	.\TimeAlarms.cpp	/^AlarmID_t TimeAlarmsClass::triggerOnce(time_t value, OnTick_t onTickHandler){   \/\/ trigger once at the given time_t$/;"	f	class:TimeAlarmsClass
type	.\lib\jsmn.h	/^	jsmntype_t type;$/;"	m	struct:__anon6
unescapeChar	.\lib\JsonToken.cpp	/^inline char JsonToken::unescapeChar(char c)$/;"	f	class:JsonToken
unescapeString	.\lib\JsonToken.cpp	/^inline void JsonToken::unescapeString(char* s)$/;"	f	class:JsonToken
unitsForTemperature	.\openweathermap.h	/^	String unitsForTemperature;$/;"	m	class:Weather
updateForecast	.\openweathermap.cpp	/^bool Weather::updateForecast(weather_forecast_response_t& response) {$/;"	f	class:Weather
updateNextTrigger	.\TimeAlarms.cpp	/^void AlarmClass::updateNextTrigger()$/;"	f	class:AlarmClass
value	.\TimeAlarms.h	/^  time_t value;$/;"	m	class:AlarmClass
value	.\lib\HttpClient.h	/^  const char* value;$/;"	m	struct:__anon1
value	.\lib\JsonObjectIterator.h	/^            JsonValue value() const$/;"	f	class:ArduinoJson::Parser::JsonObjectIterator
value	.\lib\JsonPair.h	/^            JsonValue value()$/;"	f	class:ArduinoJson::Parser::JsonPair
waitDayRollover	.\TimeAlarms.h	174;"	d
waitForDigits	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::waitForDigits( uint8_t Digits, dtUnits_t Units)$/;"	f	class:TimeAlarmsClass
waitForRollover	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::waitForRollover( dtUnits_t Units)$/;"	f	class:TimeAlarmsClass
waitHourRollover	.\TimeAlarms.h	173;"	d
waitMinuteRollover	.\TimeAlarms.h	172;"	d
waitUntilThisDay	.\TimeAlarms.h	171;"	d
waitUntilThisHour	.\TimeAlarms.h	170;"	d
waitUntilThisMinute	.\TimeAlarms.h	169;"	d
waitUntilThisSecond	.\TimeAlarms.h	168;"	d
weather_forecast_response_t	.\openweathermap.h	/^	weather_forecast_response_t(): temp_high(255), temp_low(255), conditionCode(-1), isSuccess(false) {};$/;"	f	struct:weather_forecast_response_t
weather_forecast_response_t	.\openweathermap.h	/^typedef struct weather_forecast_response_t {$/;"	s
weather_forecast_response_t	.\openweathermap.h	/^} weather_forecast_response_t;$/;"	t	typeref:struct:weather_forecast_response_t
weather_sync_interval	.\openweathermap.h	/^	unsigned long weather_sync_interval;$/;"	m	class:Weather
weeksToTime_t	.\TimeAlarms.h	46;"	d
write	.\TimeAlarms.cpp	/^    void TimeAlarmsClass::write(AlarmID_t ID, time_t value)$/;"	f	class:TimeAlarmsClass
